#Tooltips will be generated from these rules when they fail. Use of custom_tooltip is recommended
#There are still multiple hard-coded rules that apply in addition to these.
#If rules here evaluate to true, there might still be other rules that make the action unavailable.
#If a rule here evaluates to false the action will become unavailable

# is_valid_rival - unaltered

# Root = claimer
# This = system
can_add_claim = {
	hidden_trigger = {
		if = {
			limit = {
				root = {
					NOR = {
						is_country_type = default
						is_country_type = ascended_empire
						is_country_type = lost_empire
						is_country_type = eternal_empire
					}
				}
			}
			always = yes
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_POLICY
		OR = {
			root = {
				has_policy_flag = unrestricted_wars
				NOT = { has_valid_civic = civic_closed_collective }
				NOT = { has_valid_civic = civic_closed_network }
			}
			AND = {
				root = {
					has_policy_flag = liberation_wars
					has_authority = auth_democratic
					has_valid_ai_personality = yes
					has_ai_personality = democratic_crusaders
				}
				owner = { NOT = { has_authority = auth_democratic } }
			}
			AND = {
				exists = owner
				owner = { is_gestalt = yes }
			}
			AND = {
				exists = owner
				owner = {
					any_war = {
						any_attacker = { is_same_value = prevprev }
						any_defender = { is_same_value = root }
					}
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_NOT_VALID_EMPIRE
		NAND = {
			exists = owner
			owner = {
				NOR = {
					is_country_type = default
					is_country_type = fallen_empire
					is_country_type = awakened_fallen_empire
					is_country_type = awakened_sleeper
					is_country_type = ascended_empire
					is_country_type = lost_empire
					is_country_type = eternal_empire
					is_country_type = original_empire_active
					is_country_type = sofe_light_seeker
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_DEVOURING_SWARM
		NAND = {
			root = { has_valid_civic = civic_hive_devouring_swarm }
			root = { is_lithoid_empire = no }
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_DEVOURING_SWARM_LITHOID
		NAND = {
			root = { has_valid_civic = civic_hive_devouring_swarm }
			root = { is_lithoid_empire = yes }
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_ASSIMILATOR
		NOT = { root = { has_valid_civic = civic_machine_assimilator } }
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_PURIFIERS
		NAND = {
			exists = owner
			root = { has_valid_civic = civic_fanatic_purifiers }
			NOT = {	owner = { is_same_species = root } }
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_EXTERMINATOR
		NAND = {
			exists = owner
			root = { has_valid_civic = civic_machine_terminator }
			owner = {
				NOR = {
					is_same_species = root
					has_country_flag = synthetic_empire
					has_authority = auth_machine_intelligence
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_THEY_THREAT
		NAND = {
			exists = owner
			owner = {
				OR = {
					has_valid_civic = civic_hive_devouring_swarm
					has_valid_civic = civic_fanatic_purifiers
					has_valid_civic = civic_machine_terminator
					has_valid_civic = civic_machine_assimilator
				}
			}
			root = {
				NOR = {
					has_valid_civic = civic_hive_devouring_swarm
					has_valid_civic = civic_fanatic_purifiers
					has_valid_civic = civic_machine_terminator
					has_valid_civic = civic_machine_assimilator
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = fallen_empires_technology_button_disable
		root = { NOT = { is_country_type = fallen_empire } }
	}
	custom_tooltip = {
		fail_text = alwaysno
		root = { NOT = { is_country_type = teif_primitive } }
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_THEY_THREAT
		NAND = {
			exists = owner
			root = { has_valid_civic = civic_gestalt_terminator }
			owner = { is_gestalt = yes }
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_PLAYABLE_OE
		root = { 
			NOR = {
				has_valid_civic = civic_sofe_pursuit_answer
				has_valid_civic = civic_sofe_inner_strength
			}
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_BUTLERIAN_JIHADIST
		NAND = {
			has_global_flag = m_jihad_enabled
			exists = owner
			root = { mt_is_jihadist = yes }
			owner = { mt_is_machine_menace = yes }
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_MACHINE_MENACE
		NAND = {
			has_global_flag = m_jihad_enabled
			exists = owner
			root = { mt_is_machine_menace = yes }
			owner = { mt_is_jihadist = yes }
		}
	}
}

# Root = taker country
# This = giver country
can_get_claim_from_lost_system = {
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_NOT_VALID_EMPIRE
		OR = {
			is_country_type = default
			is_country_type = fallen_empire
			is_country_type = awakened_fallen_empire
			is_country_type = ascended_empire
			is_country_type = lost_empire
			is_country_type = eternal_empire
			is_country_type = original_empire_active
			is_country_type = sofe_light_seeker
		}
		root = {
			OR = {
				is_country_type = default
				is_country_type = fallen_empire
				is_country_type = awakened_fallen_empire
				is_country_type = ascended_empire
				is_country_type = lost_empire
				is_country_type = eternal_empire
				is_country_type = original_empire_active
				is_country_type = sofe_light_seeker
			}
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_DEVOURING_SWARM
		NOT = { has_valid_civic = civic_hive_devouring_swarm }
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_ASSIMILATOR
		NOT = { has_valid_civic = civic_machine_assimilator }
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_PURIFIERS
		NAND = {
			has_valid_civic = civic_fanatic_purifiers
			NOT = {	is_same_species = root }
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_EXTERMINATOR
		NAND = {
			has_valid_civic = civic_machine_terminator
			NOR = {
				is_same_species = root
				has_country_flag = synthetic_empire
				has_authority = auth_machine_intelligence
			}
		}
	}
}

# species_has_citizenship - unaltered

#Root = planet
#This = species
species_can_live_on_planet = {
	exists = root
	NAND = {
		root = { is_planet_class = pc_machine }
		NOR = {
			has_trait = trait_machine_unit
			has_trait = trait_mechanical
			has_trait = trait_doll
			AND = {
				has_trait = trait_cybernetic
				exists = root.owner
				root.owner = {
					has_authority = auth_machine_intelligence
					has_civic = civic_machine_assimilator # Assimilator empire
				}
			}
		}
	}
	NAND = {
		root = { is_planet_class = pc_hive }
		NOT = { has_trait = trait_hive_mind }
	}
	NAND = {
		root = { is_planet_class = pc_ammonia }
		NOR = { 
			has_trait = trait_pc_ammonia_preference 
			has_trait = trait_machine_unit
			has_trait = trait_mechanical
		}
	}
	NAND = {
		root = { is_planet_class = pc_sulfur }
		NOR = { 
			has_trait = trait_pc_sulfur_preference 
			has_trait = trait_machine_unit
			has_trait = trait_mechanical
		}
	}
	NAND = {
		root = { 
			OR = {
			is_planet_class = pc_habitat 
			is_planet_class = pc_ringworld_habitable
			is_planet_class = pc_relic
			is_planet_class = pc_pd_barren_hab
			is_planet_class = pc_pd_barren_cold_hab
			is_planet_class = pc_pd_frozen_hab
			is_planet_class = pc_pd_molten_hab
			is_planet_class = pc_pd_hothouse_hab
			is_planet_class = pc_pd_toxic_hab
			is_planet_class = pc_pd_gas_giant_hab
			is_planet_class = pc_pd_asteroid_hab
			is_planet_class = pc_ecocity
			is_planet_class = pc_necropolis
			is_planet_class = pc_milarc
			is_planet_class = pc_city
			}
			has_modifier = pdammoniaatmosphere 
		}
		NOR = { 
			has_trait = trait_pc_ammonia_preference
			has_trait = trait_machine_unit
			has_trait = trait_mechanical
		}
	}
	NAND = {
		root = { 
			OR = {
			is_planet_class = pc_habitat 
			is_planet_class = pc_ringworld_habitable
			is_planet_class = pc_relic
			is_planet_class = pc_pd_barren_hab
			is_planet_class = pc_pd_barren_cold_hab
			is_planet_class = pc_pd_frozen_hab
			is_planet_class = pc_pd_molten_hab
			is_planet_class = pc_pd_hothouse_hab
			is_planet_class = pc_pd_toxic_hab
			is_planet_class = pc_pd_gas_giant_hab
			is_planet_class = pc_pd_asteroid_hab
			is_planet_class = pc_ecocity
			is_planet_class = pc_necropolis
			is_planet_class = pc_milarc
			is_planet_class = pc_city
			}
			has_modifier = pdsulfuratmosphere 
		}
		NOR = { 
			has_trait = trait_pc_sulfur_preference
			has_trait = trait_machine_unit
			has_trait = trait_mechanical
		}
	}
	NAND = {
		root = { is_planet_class = pc_acid }
		NOR = { 
			has_trait = trait_pc_acid_preference 
			has_trait = trait_machine_unit
			has_trait = trait_mechanical
		}
	}
	NAND = {
		root = { 
			OR = {
			is_planet_class = pc_habitat 
			is_planet_class = pc_ringworld_habitable
			is_planet_class = pc_relic
			is_planet_class = pc_pd_barren_hab
			is_planet_class = pc_pd_barren_cold_hab
			is_planet_class = pc_pd_frozen_hab
			is_planet_class = pc_pd_molten_hab
			is_planet_class = pc_pd_hothouse_hab
			is_planet_class = pc_pd_toxic_hab
			is_planet_class = pc_pd_gas_giant_hab
			is_planet_class = pc_pd_asteroid_hab
			is_planet_class = pc_ecocity
			is_planet_class = pc_necropolis
			is_planet_class = pc_milarc
			is_planet_class = pc_city
			}
			has_building = building_acid_maker
		}
		NOR = { 
			has_trait = trait_pc_acid_preference
			has_trait = trait_machine_unit
			has_trait = trait_mechanical
		}
	}
	NAND = {
		root = { is_planet_class = pc_methane }
		NOR = { 
			has_trait = trait_pc_methane_preference 
			has_trait = trait_machine_unit
			has_trait = trait_mechanical
		}
	}
	NAND = {
		root = { 
			OR = {
			is_planet_class = pc_habitat 
			is_planet_class = pc_ringworld_habitable
			is_planet_class = pc_relic 
			is_planet_class = pc_pd_barren_hab
			is_planet_class = pc_pd_barren_cold_hab
			is_planet_class = pc_pd_frozen_hab
			is_planet_class = pc_pd_molten_hab
			is_planet_class = pc_pd_hothouse_hab
			is_planet_class = pc_pd_toxic_hab
			is_planet_class = pc_pd_gas_giant_hab
			is_planet_class = pc_pd_asteroid_hab
			is_planet_class = pc_ecocity
			is_planet_class = pc_necropolis
			is_planet_class = pc_milarc
			is_planet_class = pc_city
			}
			has_modifier = pdmethaneatmosphere 
		}
		NOR = { 
			has_trait = trait_pc_methane_preference
			has_trait = trait_machine_unit
			has_trait = trait_mechanical
		}
	}
	NAND = {
		root = { is_planet_class = pc_ash }
		NOR = { 
			has_trait = trait_pc_ash_preference 
			has_trait = trait_machine_unit
			has_trait = trait_mechanical
		}
	}
	NAND = {
		root = { 
			OR = {
			is_planet_class = pc_habitat 
			is_planet_class = pc_ringworld_habitable
			is_planet_class = pc_relic 
			is_planet_class = pc_pd_barren_hab
			is_planet_class = pc_pd_barren_cold_hab
			is_planet_class = pc_pd_frozen_hab
			is_planet_class = pc_pd_molten_hab
			is_planet_class = pc_pd_hothouse_hab
			is_planet_class = pc_pd_toxic_hab
			is_planet_class = pc_pd_gas_giant_hab
			is_planet_class = pc_pd_asteroid_hab
			is_planet_class = pc_ecocity
			is_planet_class = pc_necropolis
			is_planet_class = pc_milarc
			is_planet_class = pc_city
			}
			has_modifier = pdashatmosphere 
		}
		NOR = { 
			has_trait = trait_pc_ash_preference
			has_trait = trait_machine_unit
			has_trait = trait_mechanical
		}
	}
	NAND = {
		root = { 
			OR = {
			is_planet_class = pc_desert
			is_planet_class = pc_tropical
			is_planet_class = pc_arid
			is_planet_class = pc_ocean
			is_planet_class = pc_tundra
			is_planet_class = pc_arctic
			is_planet_class = pc_continental
			is_planet_class = pc_alpine
			is_planet_class = pc_savannah
			is_planet_class = pc_sandsea
			is_planet_class = pc_oasis
			is_planet_class = pc_mesa
			is_planet_class = pc_outback
			is_planet_class = pc_med
			is_planet_class = pc_mangrove
			is_planet_class = pc_wetswamp
			is_planet_class = pc_desertislands
			is_planet_class = pc_hajungle
			is_planet_class = pc_forest
			is_planet_class = pc_lake
			is_planet_class = pc_tepid
			is_planet_class = pc_steppe
			is_planet_class = pc_prairie
			is_planet_class = pc_veld
			is_planet_class = pc_semiarid
			is_planet_class = pc_retinal
			is_planet_class = pc_cascadian
			is_planet_class = pc_hadesert
			is_planet_class = pc_snow
			is_planet_class = pc_highland
			is_planet_class = pc_duneforest
			is_planet_class = pc_mushroom
			is_planet_class = pc_swamp
			is_planet_class = pc_mud
			is_planet_class = pc_subarctic
			is_planet_class = pc_antarctic
			is_planet_class = pc_aeolian
			is_planet_class = pc_frozen_desert
			is_planet_class = pc_boreal
			is_planet_class = pc_glacial
			is_planet_class = pc_geothermal
			is_planet_class = pc_karst
			is_planet_class = pc_primal
			is_planet_class = pc_salt
			is_planet_class = pc_coral
			is_planet_class = pc_storm
			is_planet_class = pc_rogue
			is_planet_class = pc_eyeball
			is_planet_class = pc_glacio
			is_planet_class = pc_lanthanide
			is_planet_class = pc_megaflora
			is_planet_class = pc_megaflorahive
			is_planet_class = pc_megafloratol
			is_planet_class = pc_aquatic
			is_planet_class = pc_biolumen
			is_planet_class = pc_superhabitable
			is_planet_class = pc_tidallylocked
			is_planet_class = pc_supercon
			is_planet_class = pc_irradiated
			is_planet_class = pc_methane
			is_planet_class = pc_ash
			is_planet_class = pc_nuked
			is_planet_class = pc_pdshroud
			is_planet_class = pc_gaia
			is_planet_class = pc_floating
			is_planet_class = pc_crystal
			is_planet_class = pc_graveyard
			is_planet_class = pc_technoorganic
			AND = {
				OR = {
				is_planet_class = pc_habitat
				is_planet_class = pc_pd_barren_hab
				is_planet_class = pc_pd_barren_cold_hab
				is_planet_class = pc_pd_frozen_hab
				is_planet_class = pc_pd_molten_hab
				is_planet_class = pc_pd_hothouse_hab
				is_planet_class = pc_pd_toxic_hab
				is_planet_class = pc_pd_gas_giant_hab
				is_planet_class = pc_pd_asteroid_hab
				is_planet_class = pc_ecocity
				is_planet_class = pc_necropolis
				is_planet_class = pc_milarc
				is_planet_class = pc_city
				is_planet_class = pc_ringworld_habitable
				is_planet_class = pc_relic
				}
				NOR = { 
					has_modifier = pdammoniaatmosphere 
				}
			}
			}
		}
		NOR = { 
			NOR = { 
				has_trait = trait_pc_ammonia_preference 
			    #has_trait = trait_machine_unit
				#has_trait = trait_mechanical 
			}
		}
	}
	NAND = {
		root = { 
			OR = {
			is_planet_class = pc_desert
			is_planet_class = pc_tropical
			is_planet_class = pc_arid
			is_planet_class = pc_ocean
			is_planet_class = pc_tundra
			is_planet_class = pc_arctic
			is_planet_class = pc_continental
			is_planet_class = pc_alpine
			is_planet_class = pc_savannah
			is_planet_class = pc_sandsea
			is_planet_class = pc_oasis
			is_planet_class = pc_mesa
			is_planet_class = pc_outback
			is_planet_class = pc_med
			is_planet_class = pc_mangrove
			is_planet_class = pc_wetswamp
			is_planet_class = pc_desertislands
			is_planet_class = pc_hajungle
			is_planet_class = pc_forest
			is_planet_class = pc_lake
			is_planet_class = pc_tepid
			is_planet_class = pc_steppe
			is_planet_class = pc_prairie
			is_planet_class = pc_veld
			is_planet_class = pc_semiarid
			is_planet_class = pc_retinal
			is_planet_class = pc_cascadian
			is_planet_class = pc_hadesert
			is_planet_class = pc_snow
			is_planet_class = pc_highland
			is_planet_class = pc_duneforest
			is_planet_class = pc_mushroom
			is_planet_class = pc_swamp
			is_planet_class = pc_mud
			is_planet_class = pc_subarctic
			is_planet_class = pc_antarctic
			is_planet_class = pc_aeolian
			is_planet_class = pc_frozen_desert
			is_planet_class = pc_boreal
			is_planet_class = pc_glacial
			is_planet_class = pc_geothermal
			is_planet_class = pc_karst
			is_planet_class = pc_primal
			is_planet_class = pc_salt
			is_planet_class = pc_coral
			is_planet_class = pc_storm
			is_planet_class = pc_rogue
			is_planet_class = pc_eyeball
			is_planet_class = pc_glacio
			is_planet_class = pc_lanthanide
			is_planet_class = pc_megaflora
			is_planet_class = pc_megaflorahive
			is_planet_class = pc_megafloratol
			is_planet_class = pc_aquatic
			is_planet_class = pc_biolumen
			is_planet_class = pc_superhabitable
			is_planet_class = pc_tidallylocked
			is_planet_class = pc_supercon
			is_planet_class = pc_irradiated
			is_planet_class = pc_methane
			is_planet_class = pc_ash
			is_planet_class = pc_ammonia
			is_planet_class = pc_nuked
			is_planet_class = pc_pdshroud
			is_planet_class = pc_gaia
			is_planet_class = pc_floating
			is_planet_class = pc_crystal
			is_planet_class = pc_graveyard
			is_planet_class = pc_technoorganic
			AND = {
				OR = {
				is_planet_class = pc_habitat
				is_planet_class = pc_pd_barren_hab
				is_planet_class = pc_pd_barren_cold_hab
				is_planet_class = pc_pd_frozen_hab
				is_planet_class = pc_pd_molten_hab
				is_planet_class = pc_pd_hothouse_hab
				is_planet_class = pc_pd_toxic_hab
				is_planet_class = pc_pd_gas_giant_hab
				is_planet_class = pc_pd_asteroid_hab
				is_planet_class = pc_ecocity
				is_planet_class = pc_necropolis
				is_planet_class = pc_milarc
				is_planet_class = pc_city
				is_planet_class = pc_ringworld_habitable
				is_planet_class = pc_relic
				}
				NOR = { 
					has_modifier = pdsulfuratmosphere 
				}
			}
			}
		}
		NOR = { 
			NOR = { 
				has_trait = trait_pc_sulfur_preference
			    #has_trait = trait_machine_unit
				#has_trait = trait_mechanical 
			}
		}
	}
	NAND = {
		root = { 
			OR = {
			is_planet_class = pc_desert
			is_planet_class = pc_tropical
			is_planet_class = pc_arid
			is_planet_class = pc_ocean
			is_planet_class = pc_tundra
			is_planet_class = pc_arctic
			is_planet_class = pc_continental
			is_planet_class = pc_alpine
			is_planet_class = pc_savannah
			is_planet_class = pc_sandsea
			is_planet_class = pc_oasis
			is_planet_class = pc_mesa
			is_planet_class = pc_outback
			is_planet_class = pc_med
			is_planet_class = pc_mangrove
			is_planet_class = pc_wetswamp
			is_planet_class = pc_desertislands
			is_planet_class = pc_hajungle
			is_planet_class = pc_forest
			is_planet_class = pc_lake
			is_planet_class = pc_tepid
			is_planet_class = pc_steppe
			is_planet_class = pc_prairie
			is_planet_class = pc_veld
			is_planet_class = pc_semiarid
			is_planet_class = pc_retinal
			is_planet_class = pc_cascadian
			is_planet_class = pc_hadesert
			is_planet_class = pc_snow
			is_planet_class = pc_highland
			is_planet_class = pc_duneforest
			is_planet_class = pc_mushroom
			is_planet_class = pc_swamp
			is_planet_class = pc_mud
			is_planet_class = pc_subarctic
			is_planet_class = pc_antarctic
			is_planet_class = pc_aeolian
			is_planet_class = pc_frozen_desert
			is_planet_class = pc_boreal
			is_planet_class = pc_glacial
			is_planet_class = pc_geothermal
			is_planet_class = pc_karst
			is_planet_class = pc_primal
			is_planet_class = pc_salt
			is_planet_class = pc_coral
			is_planet_class = pc_storm
			is_planet_class = pc_rogue
			is_planet_class = pc_eyeball
			is_planet_class = pc_glacio
			is_planet_class = pc_lanthanide
			is_planet_class = pc_megaflora
			is_planet_class = pc_megaflorahive
			is_planet_class = pc_megafloratol
			is_planet_class = pc_aquatic
			is_planet_class = pc_biolumen
			is_planet_class = pc_superhabitable
			is_planet_class = pc_tidallylocked
			is_planet_class = pc_supercon
			is_planet_class = pc_irradiated
			is_planet_class = pc_ammonia
			is_planet_class = pc_sulfur
			is_planet_class = pc_ash
			is_planet_class = pc_gaia
			is_planet_class = pc_nuked
			is_planet_class = pc_pdshroud
			is_planet_class = pc_floating
			is_planet_class = pc_crystal
			is_planet_class = pc_graveyard
			is_planet_class = pc_technoorganic
			AND = {
				OR = {
				is_planet_class = pc_ringworld_habitable
				is_planet_class = pc_relic
				is_planet_class = pc_habitat
				is_planet_class = pc_pd_barren_hab
				is_planet_class = pc_pd_barren_cold_hab
				is_planet_class = pc_pd_frozen_hab
				is_planet_class = pc_pd_molten_hab
				is_planet_class = pc_pd_hothouse_hab
				is_planet_class = pc_pd_toxic_hab
				is_planet_class = pc_pd_gas_giant_hab
				is_planet_class = pc_pd_asteroid_hab
				is_planet_class = pc_ecocity
				is_planet_class = pc_necropolis
				is_planet_class = pc_milarc
				is_planet_class = pc_city
				}
				NOT = { has_modifier = pdmethaneatmosphere }
			}
			}
		}
		NOR = { 
			NOR = { 
				has_trait = trait_pc_methane_preference 
			    #has_trait = trait_machine_unit
				#has_trait = trait_mechanical 
			}
		}
	}
	NAND = {
		root = { 
			OR = {
			is_planet_class = pc_desert
			is_planet_class = pc_tropical
			is_planet_class = pc_arid
			is_planet_class = pc_ocean
			is_planet_class = pc_tundra
			is_planet_class = pc_arctic
			is_planet_class = pc_continental
			is_planet_class = pc_alpine
			is_planet_class = pc_savannah
			is_planet_class = pc_sandsea
			is_planet_class = pc_oasis
			is_planet_class = pc_mesa
			is_planet_class = pc_outback
			is_planet_class = pc_med
			is_planet_class = pc_mangrove
			is_planet_class = pc_wetswamp
			is_planet_class = pc_desertislands
			is_planet_class = pc_hajungle
			is_planet_class = pc_forest
			is_planet_class = pc_lake
			is_planet_class = pc_tepid
			is_planet_class = pc_steppe
			is_planet_class = pc_prairie
			is_planet_class = pc_veld
			is_planet_class = pc_semiarid
			is_planet_class = pc_retinal
			is_planet_class = pc_cascadian
			is_planet_class = pc_hadesert
			is_planet_class = pc_snow
			is_planet_class = pc_highland
			is_planet_class = pc_duneforest
			is_planet_class = pc_mushroom
			is_planet_class = pc_swamp
			is_planet_class = pc_mud
			is_planet_class = pc_subarctic
			is_planet_class = pc_antarctic
			is_planet_class = pc_aeolian
			is_planet_class = pc_frozen_desert
			is_planet_class = pc_boreal
			is_planet_class = pc_glacial
			is_planet_class = pc_geothermal
			is_planet_class = pc_karst
			is_planet_class = pc_primal
			is_planet_class = pc_salt
			is_planet_class = pc_coral
			is_planet_class = pc_storm
			is_planet_class = pc_rogue
			is_planet_class = pc_eyeball
			is_planet_class = pc_glacio
			is_planet_class = pc_lanthanide
			is_planet_class = pc_megaflora
			is_planet_class = pc_megaflorahive
			is_planet_class = pc_megafloratol
			is_planet_class = pc_aquatic
			is_planet_class = pc_biolumen
			is_planet_class = pc_superhabitable
			is_planet_class = pc_tidallylocked
			is_planet_class = pc_supercon
			is_planet_class = pc_irradiated
			is_planet_class = pc_methane
			is_planet_class = pc_ammonia
			is_planet_class = pc_sulfur
			is_planet_class = pc_gaia
			is_planet_class = pc_nuked
			is_planet_class = pc_pdshroud
			is_planet_class = pc_floating
			is_planet_class = pc_crystal
			is_planet_class = pc_graveyard
			is_planet_class = pc_technoorganic
			AND = {
				OR = {
				is_planet_class = pc_ringworld_habitable
				is_planet_class = pc_relic
				is_planet_class = pc_habitat
				is_planet_class = pc_pd_barren_hab
				is_planet_class = pc_pd_barren_cold_hab
				is_planet_class = pc_pd_frozen_hab
				is_planet_class = pc_pd_molten_hab
				is_planet_class = pc_pd_hothouse_hab
				is_planet_class = pc_pd_toxic_hab
				is_planet_class = pc_pd_gas_giant_hab
				is_planet_class = pc_pd_asteroid_hab
				is_planet_class = pc_ecocity
				is_planet_class = pc_necropolis
				is_planet_class = pc_milarc
				is_planet_class = pc_city
				}
				NOT = { has_modifier = pdashatmosphere }
			}
			}
		}
		NOR = { 
			NOR = { 
				has_trait = trait_pc_ash_preference 
			    #has_trait = trait_machine_unit
				#has_trait = trait_mechanical 
			}
		}
	}
	NAND = {
		has_global_flag = stability_MOD_installed
		root = { is_planet_class = pc_infested }
	}
	NAND = {
		exists = root.controller
		root.controller = { is_country_type = hfe_plague_zombie }
	}
	NAND = {
		has_trait = trait_digital
		root = { NOT = { is_planet_class = pc_matryoshka } }
	}	
}

#Root = country
#This = pop
can_generate_leader_from_pop = {
	has_citizenship_rights = yes
	NOR = {
		has_trait = trait_syncretic_proles
		has_trait = trait_nerve_stapled
		has_trait = trait_slave_gene
		root = { has_origin = origin_hive_overmind }
		has_trait = trait_plentiful_traditions_cocoon
		has_trait = trait_memorex_comatos
		has_trait = trait_infested_basic
	}
	OR = {
		is_robot_pop = no
		AND = {
			NOT = { has_global_flag = stability_MOD_installed }
			OR = {
				root = { has_technology = tech_synthetic_leaders }
				root = { has_authority = auth_machine_intelligence }
				root = { is_mechanical_empire = yes }
			}
		}
		root = { has_technology = tech_mind_plus }
		AND = {
			has_global_flag = stability_MOD_installed
			has_trait = "trait_mechanical"
			OR = {
				root = { has_technology = tech_synthetic_leaders }
				root = { has_authority = auth_machine_intelligence }
				root = { is_mechanical_empire = yes }
			}
			root = { has_policy_flag = ai_full_rights }
		}
		AND = {
			has_global_flag = stability_MOD_installed
			has_trait = trait_machine_unit
			OR = {
				root = { has_authority = auth_machine_intelligence }
				root = {
					has_technology = tech_automaton_brain
					has_policy_flag = full_robot_machine_pop
				}
				has_citizenship_type = { type = citizenship_full_machine }
			}
		}
	}
	OR = {
		is_same_species = root
		root = {
			NAND = {
				has_origin = origin_necrophage
				has_trait = trait_necrophage
			}
		}
	}
}


# can_vote_in_democratic_election - unaltered

#Checks whether this species is eligible to become rulers through elections
#Root = country
#This = species
can_generate_leader_from_species = {
	is_sapient = yes
	OR = {
		NAND = {
			NOT = { root = { has_technology = "tech_synthetic_leaders" } }
			NOT = { root = { has_policy_flag = ai_full_rights } }
			has_trait = "trait_mechanical"
		}
		has_citizenship_type = { type = citizenship_full country = root }
		has_citizenship_type = { type = citizenship_full_machine country = root }
	}
}

#Root = country
#This = pop
can_generate_military_leader_from_pop = {
	can_be_military_leader = yes
	NOT = { root = { has_origin = origin_hive_overmind } }
	OR = {
		is_robot_pop = no
		root = { has_technology = tech_synthetic_leaders }
		root = { has_authority = auth_machine_intelligence }
		root = { is_mechanical_empire = yes }
		root = { has_technology = tech_mind_plus }
		AND = {
			has_trait = trait_machine_unit
			has_citizenship_type = { type = citizenship_full_machine }
		}
	}
	OR = {
		is_same_species = root
		root = {
			NAND = {
				has_origin = origin_necrophage
				has_trait = trait_necrophage
			}
		}
	}
}

# can_generate_army_from_planet - unaltered

#Root = planet
#This = country
can_release_vassal = {
	custom_tooltip = {
		fail_text = default
		NOT = { has_valid_civic = civic_fanatic_purifiers }
	}
	custom_tooltip = {
		fail_text = default
		NOT = { has_valid_civic = civic_machine_terminator }
	}
	custom_tooltip = {
		fail_text = default
		NOT = { has_valid_civic = civic_machine_assimilator }
	}
	custom_tooltip = {
		fail_text = default
		NOT = { has_valid_civic = civic_hive_devouring_swarm }
	}
	Root = {
		exists = owner
		owner = {
			NOR = {
				is_country_type = fallen_empire
				is_country_type = awakened_fallen_empire
			}
		}
	}
	custom_tooltip = {
		fail_text = default
		NOR = {
			is_country_type = lost_empire
			is_country_type = ascended_empire
			is_country_type = eternal_empire
			is_country_type = original_empire_active
		}
	}
}

#Root = species
#This = country
can_release_vassal_from_species = {
	root = {
		is_sapient = yes
		NOR = {
			has_trait = trait_machine_unit
			has_trait = trait_hive_mind
			has_trait = trait_mechanical
			has_trait = trait_nerve_stapled
			has_trait = trait_syncretic_proles
			has_trait = trait_memorex_comatos
			has_trait = trait_infested_basic
			has_trait = trait_doll
			has_trait = trait_plentiful_traditions_cocoon
			AND = {
				prev = { NOT = { has_technology = tech_synthetic_leaders } }
				has_trait = trait_mechanical
			}
		}
		if = {
			limit = {
				prev = {
					OR = {
						has_valid_civic = civic_fanatic_purifiers
						has_valid_civic = civic_machine_assimilator
						has_valid_civic = civic_hive_devouring_swarm
					}
				}
			}
			is_same_species = prev
		}
		if = {
			limit = { prev = { has_authority = auth_machine_intelligence } }
			OR = {
				has_trait = trait_machine_unit
				has_citizenship_rights = yes
				has_citizenship_type = { type = citizenship_limited }
			}
		}
		if = {
			limit = { prev = { has_authority = auth_hive_mind } }
			OR = {
				has_trait = trait_hive_mind
				has_citizenship_rights = yes
				has_citizenship_type = { type = citizenship_limited }
			}
		}
	}
}

# can_generate_army_from_species - unaltered

# Root = species
# This = country
can_modify_species = {
	OR = {
		AND = { 
			has_global_flag = gf_alphamod_activated
			root.owner = {
				NOT { has_country_flag = recent_gene_project_complete }
				or = {
					is_ai = no
					and = {
						has_ascension_perk = ap_engineered_evolution
						has_origin = origin_genepurists
					}
				}
			}
		}
		AND = {
			NOT = { has_global_flag = gf_alphamod_activated }
			root.owner = {
				OR = {
					AND = {
						is_ai = yes
						OR = {
							has_global_flag = z_pf2_ai_species_mod
							AND = {
								has_global_flag = z_pf2_ai_species_mod_limit
								count_exact_species = {
									count < 3
									limit = {
										OR = {
											is_same_species = root
											is_subspecies = root
										}
									}
								}
							}
						}
					}
					AND = {
						is_ai = no
						OR = {
							NOT = { has_trait = trait_self_modified }
							is_same_species = root
						}
					}
				}
			}
		}
	}
}

# subject_can_expand - unaltered

#Root = country, attacker
#This = country, target
#This rule is a condition for taking hostile actions towards neutral targets. Such as landing troops or attacking their fleets
can_take_hostile_actions = {
	if = {
		limit = {
			ROOT = {
				has_policy_flag = first_contact_attack_not_allowed
			}
			NOR = {
				is_hostile = ROOT
				has_communications = ROOT
			}
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_FIRST_CONTACT_PROTOCOL"
			always = no
		}
	}
	else_if = {
		limit = {
			AND = {
				NOT = { has_country_flag = hostile_to_nomads }
				ROOT = {
					is_country_type = nomad
				}
			}
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_FIRST_CONTACT_PROTOCOL"
			always = no
		}
	}
	else_if = {
		#attacking primitives with non-interference
		limit = {
			ROOT = {
				OR = {
					is_country_type = default
					is_country_type = ascended_empire
				}
				OR = {
					has_policy_flag = interference_passive
					has_policy_flag = interference_active
				}
			}
			is_primitive = yes
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_NATIVE_INTERFERENCE"
			always = no
		}
	}
	else_if = {
		limit = {
			is_primitive = yes
			ROOT = {
				OR = {
					is_country_type = default
					is_country_type = ascended_empire
				}
			}
			capital_scope = {
				root = {
					NOT = {
						any_planet_within_border = {
							is_same_value = prevprev
						}
					}
				}
			}
		}
		custom_tooltip = {
			text = ""
			always = no
		}
	}
	else_if = {
		limit = {
			ROOT = { is_subject_type = satrapy }
			is_country_type = faction
			root = {
				any_owned_planet = {
					exists = controller
					controller = {
						is_same_value = prevprevprev
					}
				}
			}
		}
		custom_tooltip = {
			text = ""
			always = yes
		}
	}
	else_if = {
		limit = {
			ROOT = { is_subject_type = satrapy }
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_SATRAPY"
			always = no
		}
	}
	else_if = {
		limit = {
			ROOT = { is_subject_type = origin_protectorate }
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_SATRAPY"
			always = no
		}
	}
	else_if = {
		limit = {
			ROOT = { is_subject_type = origin_banished_ascendancy }
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_SATRAPY"
			always = no
		}
	}
	else_if = {
		limit = {
			THIS = {
				OR = {
					is_country_type = original_empire_passive
					is_country_type = void_lifeforms_1
					is_country_type = void_lifeforms_2
				}
			}
		}
		custom_tooltip = {
			always = no
		}
	}
	else_if = {
		limit = {
			ROOT = {
				OR = {
					is_country_type = void_lifeforms_1
					is_country_type = void_lifeforms_2
				}
			}
		}
		custom_tooltip = {
			always = no
		}
	}
	else_if = {
		limit = {
			OR = {
				AND = {
					root = { has_country_flag = nep_gaia_assist_war }
					has_country_flag = nep_highlander_country
				}
				AND = {
					root = { has_country_flag = nep_highlander_assist_war }
					has_country_flag = nep_gaia_country
				}
			}
		}
		always = yes
	}
	else_if = {
		limit = {
			ROOT = {
				NOT = { has_technology = tech_nep_phantom_phase_shift }
			}
			is_country_type = nep_phantom_passive
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_NEP_PHANTOM"
			always = no
		}
	}
	else_if = {
		limit = {
			root = { is_ai = no }
			OR = {
				AND = {
					root = { has_country_flag = nep_gaia_assist_war }
					has_country_flag = nep_gaia_country
				}
				AND = {
					has_country_flag = nep_gaia_assist_war
					root = { has_country_flag = nep_gaia_country }
				}
				AND = {
					root = { has_country_flag = nep_highlander_assist_war }
					has_country_flag = nep_highlander_country
				}
				AND = {
					has_country_flag = nep_highlander_assist_war
					root = { has_country_flag = nep_highlander_country }
				}
			}
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_NEP_GAIA"
			always = no
		}
	}
	else = {
		always = yes
	}
}

#Root = country, attacker
#This = country, target
#This rule is a condition for declaring war
can_declare_war = {
	custom_tooltip = {
		fail_text = "ACTION_DECLARE_WAR_OVERLORD_ON_SUBJECT"
		NOT = {
			AND = {
				OR = {
					is_subject_type = "vassal"
					is_subject_type = "duchy"
					is_subject_type = "charter"
					is_subject_type = "protectorate"
					is_subject_type = "signatory"
					is_subject_type = "scion_signatory"
					is_subject_type = "fe_clan_member"
					is_subject_type = "fe_demilitarized_state"
					is_subject_type = "fe_union_state"
					is_subject_type = "fe_symbiote"
					is_subject_type = "fe_auxiliary"
					is_subject_type = "banished_ascendancy"
					is_subject_type = "eternal_vassal"
					is_subject_type = "promising_race"
					is_subject_type = "pacified_race"
					is_subject_type = "object_use"
				}
				overlord = {
					is_same_value = root
				}
			}
		}
	}
	if = {
		limit = {
			exists = root
			ROOT = {
				has_policy_flag = no_wars
				OR = {
					is_subject = no
					overlord = {
						is_same_value = root
					}
				}
			}
		}
		custom_tooltip = {
			text = "CAN_DECLARE_WAR_POLICY"
			always = no
		}
	}
	if = {
		limit = {
				has_global_flag = nyblax_no_wars
		}
		custom_tooltip = {
			text = "NYBLAX_NO_WARS"
			always = no
		}
	}
	if = {
		limit = {
			exists = root
			ROOT = {
				is_ai = yes
			}
		}
		ROOT = {
			is_at_war = no
			OR = {
				NOT = { has_country_flag = ai_no_fed_wars }
				NOT = {
					any_country = {
						is_in_federation_with = ROOT
						is_ai = no
					}
				}
			}
		}
	}
}

# can_colonize_planet - unaltered

#Root = country
#This = planet
can_colonize_outside_borders = {
	root = {
		OR = {
			is_country_type = ev_leviathans_crisis
		   
			is_country_type = hfe_features_exodus
		}
	}
	exists = solar_system
	solar_system = {
		not = {
			exists = owner
		}
	}
}

#Root = country
#This = planet
can_terraform_planet = {
	NAND = {
		root = { has_policy_flag = pre_sapients_protect }
		any_owned_pop = { is_sapient = no }
	}
	custom_tooltip = {
		fail_text = "requires_actor_not_devouring_swarm_lithoid"
		root = { is_lithoid_devouring_swarm = no }
	}
	custom_tooltip = {
		fail_text = NO_TERRAFORM_UNDERGROUND_WORLD
		NOR = {
			has_modifier = "underground_world"
			has_modifier = "cryokarst_world"
		}
	}
	custom_tooltip = {
		fail_text = "requires_actor_not_pdtol"
		root = { NOT = { has_origin = origin_pd_tree_of_life } }
	}
}

#Root = country
#This = pop
can_colonize_with_pop = {
	Root = {
		OR = {
			NOT = { is_country_type = default_ev }
			AND = {
				is_country_type = default_ev
				OR = {
					has_origin = origin_ev_both_choosen
					has_country_flag = has_ev_to_planets
				}
			}
		}
	}
	NOT = { has_trait = trait_plentiful_traditions_cocoon }
	has_colonization_control = {
		value = no
		country =root
	}
	OR = {
		NOT = { has_trait = trait_self_modified }
		is_same_species = root
	}
	if = {
		limit = {
			is_sapient = no
		}
		custom_tooltip = {
			always = no
		}
	}
	else = {
		always = yes
	}
}

#Root = country
#This = species
can_colonize_with_species = {
	Root = {
		OR = {
			NOT = { is_country_type = default_ev }
			AND = {
				is_country_type = default_ev
				
				OR = {
					has_origin = origin_ev_both_choosen
					has_country_flag = has_ev_to_planets
				}
			}
		}
	}
	NOT = { has_trait = trait_plentiful_traditions_cocoon }
	has_colonization_control = {
		value = no
		country =root
	}
	OR = {
		NOT = { has_trait = trait_self_modified }
		is_same_species = root
	}
	if = {
		limit = {
			is_sapient = no
		}
		custom_tooltip = {
			always = no
		}
	}
	else = {
		always = yes
	}
}

# pop_has_random_ethics - unaltered

# Root = Species
# From = Country
# This = Species
species_has_happiness = {
	NOR = {
		has_trait = trait_machine_unit
		has_trait = trait_hive_mind
		has_trait = trait_nerve_stapled
		has_trait = sh_trait_shenhai
		has_trait = sh_trait_shenhai1
		has_trait = sh_trait_shenhai2
		has_trait = sh_trait_silent
		has_trait = sh_trait_silent1
		has_trait = trait_plentiful_traditions_cocoon
		has_trait = trait_memorex_comatos
		AND = {
			has_trait = trait_mechanical
			OR = {
				NOT = { exists = from }
				from = {
					has_authority = auth_machine_intelligence
					NOR = {
						has_civic = civic_machine_emotion_emulator_intelligence
						has_modifier = mod_civic_machine_ee_intelligence
					}
				}
				from = {
					NOT = { has_technology = tech_synthetic_workers }
					NAND = {
						has_global_flag = stability_MOD_installed
						has_technology = tech_sapient_ai
					}
						  
					has_policy_flag = ai_outlawed
					OR = {
						NOT = { has_global_flag = stability_MOD_installed }
						has_technology = tech_synthetic_workers
						has_technology = tech_sapient_ai
					}
				}
			}
		}
		AND = {
			has_trait = trait_cybernetic
			exists = from
			from = {
				has_authority = auth_machine_intelligence
				has_civic = civic_machine_assimilator
				NOR = {
					has_civic = civic_machine_emotion_emulator_intelligence
					has_modifier = mod_civic_machine_ee_intelligence
				}
			}
		}
	}
}

#Root = country, us
#This = country, them
#This rule is a condition for determining if a country is hostile towards another. not to be confused with can_take_hostile_action
can_be_hostile_towards = {
	if = {
		limit = { is_primitive = yes }
		ROOT = {
			NOT = { has_policy_flag = interference_passive }
		}
	}
	else_if = {
		limit = { ROOT = { is_primitive = yes } }
		NOT = { has_policy_flag = interference_passive }
	}
	else_if = {
		limit = { is_country_type = ratlings }
		always = yes
	}
	else_if = {
		limit = { is_country_type = void_lifeforms_1 }
		always = yes
	}
	else_if = {
		limit = { ROOT = { is_country_type = void_lifeforms_1 } }
		always = yes
	}
	else_if = {
		limit = { is_country_type = void_lifeforms_2 }
		always = yes
	}
	else_if = {
		limit = { ROOT = { is_country_type = void_lifeforms_2 } }
		always = yes
	}
}

# Checks if a pop can procreate
# This = Species
# Root = Planet
can_species_procreate = {
	is_sapient = yes
	NOR = {
		has_trait = trait_machine_unit
		has_trait = hfe_species_trait_brainworm
		has_trait = trait_hive_mind_overlord
		has_trait = trait_plentiful_traditions_cocoon
		has_trait = trait_doll
		has_trait = trait_memorex_comatos
		has_trait = me_trait_full_ai
		AND = {
			has_trait = trait_mechanical
			NOR = {
				has_trait = trait_biorobot
				has_trait = trait_biorobot_2
				root.owner = { has_policy_flag = synth_pop_growth_focus }
			}
		}
		AND = {
			root = { owner = { has_origin = origin_hive_queen } }
			has_trait = trait_hive_mind
		}
	}
	NAND = {
		root = { has_modifier = slave_colony }
		NOT = { has_citizenship_type = { type = citizenship_slavery country = root.owner } }
	}
	if = {
		limit = {
			has_trait = trait_necrophage
		}
		NOT = {
			root = {
				any_owned_species = {
					species_can_be_necrophaged = yes
				}
			}
		}
	}
	NAND = {
		has_global_flag = hfe_installed
		hfe_trigger_population_procreate_housing_block_enabled = yes
		root = { free_housing <= -1 }
	}
}

# Checks if a pop can be assembled
# This = Species
# Root = Planet
can_species_be_assembled = {
	is_sapient = yes
	NOT = {
		has_citizenship_type = { country = root.owner type = citizenship_assimilation }
	}
	if = {
		limit = {
			owner = {
				has_policy_flag = assembly_organic
			}
		}
		OR = {
			is_archetype = BIOLOGICAL
			is_archetype = BIOMORPH
		}
	}
	# else_if = {
	# 	limit = {
	# 		owner = {
	# 			has_policy_flag = assembly_robotic
	# 		}
	# 	}
	# 	is_archetype = ROBOT
	# }
	# is_archetype = MACHINE
}

#This rule is a condition for bombarding planets
#Root = fleet, potential attacker
#From = planet, potential target
can_orbital_bombard = {
	exists = FROM.OWNER
	NOR = {
		any_owned_ship = {
			is_ship_size = colossus
			is_ship_size = fe_colossus
		}
	}
	NAND = {
		FROM = {
			OR = {
				is_planet_class = pc_shielded_gaia
				num_buildings = { type = building_training_bomboardment value > 0 }
			}
		}
		ROOT.OWNER = {
			NOR = {
				is_country_type = extradimensional
				is_country_type = extradimensional_2
				is_country_type = extradimensional_3
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire
				is_country_type = gray_goo
				is_country_type = mem_ancestor_guardian
				is_country_type = mem_vazurans
				is_country_type = human_fallen_empire
				is_country_type = ag_ancient_primitive_crisis
				is_country_type = ag_zeta_crisis_country
				is_country_type = ag_ancient_psi_guardian
				is_country_type = kuat_fleet
				is_country_type = awakened_return_kuat_empire
				is_country_type = katzenartig_imperium
				is_country_type = dormant_marauders
				is_country_type = marauder_raiders
				is_country_type = ruined_marauders
				is_country_type = vol
				AND = {
					is_country_type = awakened_marauders
					FROM.CONTROLLER = {
						NAND = {
							is_subject_type = satrapy
							NOT = { has_country_flag = rebelling_satrapy }
						}
					}
				}
			}
		}
	}
	OR = {
		AND = {
			ROOT.OWNER = {
				NOT = { has_communications = FROM.OWNER }
			}
			FROM.OWNER = {
				NOT = { is_country_type = primitive }
			}
		}
		AND = {
			ROOT.OWNER = {
				NOR = {
					has_policy_flag = interference_passive
					has_policy_flag = interference_active
				}
			}
			FROM.OWNER = { is_country_type = primitive }
		}
		ROOT.OWNER = { is_hostile = FROM.CONTROLLER }
		ROOT.OWNER = { is_at_war_with = FROM.CONTROLLER }
		FROM = {
			OR = {
				is_planet_class = pc_infested
				has_planet_flag = bwm_ancestor_world
			}
		}
		FROM.CONTROLLER = {
			OR = {
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire
				is_country_type = ag_ancient_primitive_crisis
				is_country_type = ag_zeta_crisis_country
				is_country_type = ag_ancient_psi_guardian
				is_country_type = original_empire
				is_country_type = mem_ancestor_guardian
				is_country_type = compound_empire
				is_country_type = kuat_fleet
				is_country_type = awakened_return_kuat_empire
				is_country_type = void_lifeforms_1
				is_country_type = void_lifeforms_2
				is_country_type = katzenartig_imperium
				AND = {
					has_global_flag = the_sleeper_mod_active
					is_sleeper = yes
				}
			}
		}
		ROOT.OWNER = {
			OR = {
				is_country_type = extradimensional
				is_country_type = extradimensional_2
				is_country_type = extradimensional_3
				is_country_type = swarm
				is_country_type = ai_empire
				# is_country_type = cybrex_empire  # should be governed by hostile rule
				is_country_type = dormant_marauders
				is_country_type = marauder_raiders
				is_country_type = ruined_marauders
				is_country_type = gray_goo
				is_country_type = vol
				is_country_type = mercenary_fleet
				is_country_type = ev_leviathans_crisis
				is_country_type = wg_crisis_country
				is_country_type = afk_crisis_country
				is_country_type = kuat_fleet
				is_country_type = kuat_fallen_empire
				is_country_type = kuat_awakened_fallen_empire
				is_country_type = awakened_return_kuat_empire
				is_country_type = LsE_fallen_empire
				is_country_type = ag_kuat_invasion_country
				is_country_type = ag_ancient_primitive_crisis
				is_country_type = ag_ancient_gamma_guardian
				is_country_type = ag_zeta_crisis_country
				is_country_type = ag_ancient_psi_guardian
				is_country_type = original_empire
				is_country_type = mem_ancestor_guardian
				is_country_type = compound_empire
				is_country_type = acot_crazed_stellarite
				is_country_type = katzenartig_imperium
				is_country_type = void_lifeforms_1
				is_country_type = void_lifeforms_2
				AND = {
					has_global_flag = has_wsg_mod
					is_khan_country_type = yes
				}
				AND = {
					is_country_type = ag_ancient_psi_guardian
					root.from.controller = { is_hostile = root.owner }
				}
				AND = {
					has_global_flag = the_sleeper_mod_active
					is_sleeper = yes
				}
				AND = {
					is_country_type = awakened_marauders
					FROM.CONTROLLER = {
						NAND = {
							is_subject_type = satrapy
							NOT = { has_country_flag = rebelling_satrapy }
						}
					}
				}
			}
		}
		AND = {
    	    from.controller = {
    	        is_country_type = faction
    	        NOT = { is_same_value = root.owner }
    	    }
    	    from.owner = {
    	        is_same_value = root.owner
    	    }
		}
	}
	FROM = { 
		NOR = { 
			has_modifier = "underground_world"
			has_modifier = "cryokarst_world"
		}
	}
}

# can_planet_support_orbital_station - unaltered

# Check if full sensor range in entire galaxy
# root: country
has_full_sensor_range = {
	NOR = {
		has_country_flag = z_fw_misc_full_sensor_off
		has_country_flag = had_closed_spy_orb
	}
	OR = {
		has_megastructure = spy_orb_4
		has_megastructure = spy_orb_restored
		has_megastructure = sofe_omega_spy_orb_center
		has_country_flag = z_fw_r_celestial_orrey_activited
		has_country_flag = z_fw_r_cheat_quantum_beacon_activited
		has_country_flag = z_lctr_r_adv_sensor_activated_full
	}
}

# show_notification_for_ground_combat - unaltered
# should_apply_neighbor_rival_modifier - unaltered
# are_rebels_hostile - unaltered
# should_colony_be_destroyed_on_pc_change - unaltered
# is_extradimensional_portal - unaltered
# is_extradimensional_anchor - unaltered
# will_anger_fallen_empire - unaltered
# can_have_robot_pops - unaltered
# can_stop_purge_pop_manually - unaltered
# can_purge_pop_manually - unaltered
# fleet_uses_templates - unaltered

# this = starbase, megastructure or planet
can_orbitable_repair_ships = {
	OR = {
		AND = {
			is_scope_type = starbase
			OR = {
				has_starbase_size >= starbase_starport
				has_starbase_size = juggernaut
				has_starbase_size = ascended_juggernaut
				has_starbase_size = fe_goliath
				has_starbase_size >= ls_starbase_starport
				has_starbase_size = origin_super_citadel_playable
				has_starbase_size = origin_super_citadel
				has_starbase_size >= acot_precusor_starbase
				has_starbase_size >= acot_precusor_sigma_starbase
				has_starbase_size >= acot_precusor_phanon_starcitadel
				has_starbase_size >= acot_star_commander
				has_starbase_size >= precursor_colossus
			}
			fleet = {
				is_disabled = no
			}
		}
		AND = {
			is_scope_type = megastructure
			OR = {
				is_megastructure_type = mega_shipyard_1
				is_megastructure_type = mega_shipyard_2
				is_megastructure_type = mega_shipyard_3
				is_megastructure_type = acot_precursor_colossus_base
				is_megastructure_type = acot_precursor_colossus_stage_two
				is_megastructure_type = acot_amerigo
				is_megastructure_type = acot_amerigo_ae
				is_megastructure_type = acot_amerigo_se
				is_megastructure_type = acot_amerigo_oe
				is_megdastructure_type = acot_phanon_master_reactor_sphere
			}
		}
	}
}

# this = ship
# root = country that kills ship
can_spawn_debris = {
	root = { 
		OR = {
			is_country_type = default
			is_country_type = default_ev
			is_country_type = teif_primitive
			is_country_type = ascended_empire
			is_country_type = lost_empire
		}
	}
	exists = owner
	owner = {
		NAND = {
			OR = {
				has_global_flag = z_fw_flg_glbl_tech_overwhelm
				has_global_flag = stability_MOD_installed
			}
			relative_power = { who = root category = technology value >= superior }
		}
		NAND = {
			OR = {
				is_country_type = fallen_empire
				is_country_type = awakened_fallen_empire
			}
			has_global_flag = z_cm_fallen_technology
		}
		NOR = {
			has_ascension_perk = ap_enigmatic_engineering
			has_civic = civic_tw_atlantis
			has_ethic = ethic_fanatic_communism
			has_country_flag = fallen_empire_6_human_2
			is_country_type = default_ev
			is_country_type = wg_crisis_country
			AND = {
				has_global_flag = has_wsg_mod
				is_khan_country_type = yes
			}
			has_government = "gov_eternal_continuum"
			has_valid_civic = civic_sofe_pursuit_answer
			is_country_type = original_empire
			is_country_type = original_empire_passive
			has_civic = civic_hive_strong_connection
			is_country_type = afk_crisis_country
		}
	}
}

# this = system
# root = country
# Determines if AI-controlled empires should restrict (and thus avoid) a system
# Used by regular empires, fallen empires & crises
ai_should_restrict_system = {
	OR = {
		AND = {
			root = {
				OR = {
					is_country_type = fallen_empire
					is_country_type = lost_empire
					is_country_type = eternal_empire
				}
			}
			exists = owner
			owner = { 
				OR = {
					is_country_type = awakened_marauders 
					is_country_type = dormant_marauders
				}
			}
		}
		AND = {
			root = { 
				OR = {
					is_country_type = awakened_marauders 
					is_country_type = marauder_raiders
				}
			}
			exists = owner
			owner = {
				OR = {
					is_country_type = fallen_empire
					is_country_type = lost_empire
					is_country_type = eternal_empire
					AND = {
						has_global_flag = sofe_activated
						is_progenitor_empires = yes
					}
				}
			}
		}
		AND = {
			root = {
				OR = {
					is_country_type = fallen_empire
					is_country_type = awakened_marauders
					is_country_type = marauder_raiders
					is_country_type = lost_empire
					is_country_type = eternal_empire
					is_country_type = ag_ancient_psi_guardian
				}
			}
			any_fleet_in_system = {
				exists = owner
				owner = {
					OR = {
						is_country_type = guardian_dragon
						is_country_type = guardian_stellarite
						is_country_type = guardian_wraith
						is_country_type = guardian_horror
						is_country_type = guardian_fortress
						is_country_type = guardian_dreadnought
						is_country_type = guardian_elderly_tiyanki
						is_country_type = guardian_hatchling
						is_country_type = guardian_scavenger_bot
						is_country_type = sofe_sentinel_active
					}
				}
			}
		}
		AND = {
			root = {
				OR = {
					is_country_type = fallen_empire
					is_country_type = awakened_marauders
					is_country_type = marauder_raiders
					is_country_type = original_empire
					is_country_type = eternal_empire
				}
			}
			OR = {
				AND = {
					has_star_flag = crystal_home_system
					any_fleet_in_system = {
						exists = owner
						owner = { is_country_type = crystal }
					}
				}
				AND = {
					has_star_flag = amoeba_home_system
					any_fleet_in_system = {
						exists = owner
						owner = {
							OR = {
								is country_type = amoeba
								is_country_type = amoeba_garrison
							}
						}
					}
				}
				AND = {
					has_star_flag = drone_home_system
					any_fleet_in_system = {
						exists = owner
						owner = { is_country_type = drone }
					}
				}
			}
		}
		AND = {
			root = {
				OR = {
					is_country_type = default
					is_country_type = fallen_empire
					is_country_type = awakened_fallen_empire
					is_country_type = awakened_marauders
					is_country_type = ag_ancient_psi_guardian
				}
			}
			OR = {
				has_star_flag = ag_zeta_crisis_psionic_storm_system
				has_star_flag = ag_zeta_crisis_psionic_singularity_system
			}
		}
		AND = {
			root = { is_country_type = default }
			exists = owner
			owner = { is_country_type = original_empire }
		}	
	}
}


# can_subjugate_empires - unaltered

# THIS = Fleet
can_jump_drive = {
	if = {
		limit = { 
			exists = solar_system
			solar_system = { has_star_flag = nep_Scrus_cluster } 
		}
		custom_tooltip = {
			text = "CAN_NOT_JUMP_WHEN_IN_SCRUS"
			always = no
		}
	}
	else_if = {
		limit = { 
			exists = solar_system
			solar_system = { 
				OR = {
					has_star_flag = nep_whitegoo_1
					has_star_flag = nep_whitegoo_2
					has_star_flag = nep_whitegoo_3
				}
			}
			owner = { NOT = { has_technology = tech_nep_whitegoo_3_2 } }
		}
		custom_tooltip = {
			text = "CAN_NOT_JUMP_IN_WHITEGOO"
			always = no
		}
	}
	else_if = {
		limit = { 
			exists = solar_system
			solar_system = { has_star_flag = ag_no_jump_out_system } 
		}
		custom_tooltip = {
			text = ag_jump_drive_unable_system_tooltip
			always = no
		}
	}
	else_if = {
		limit = { 
			AND = {
				owner = { has_country_flag = ag_gamma_station_ftl_unlocked }
				has_fleet_flag = ag_gamma_station_player
			}
		}
		custom_tooltip = {
			text = ag_jump_drive_unable_tooltip
			always = no
		}
	}
	else = {
		always = yes
	}
}

# this = country
can_spawn_occupation_armies = {
	OR = {
		is_country_type = default
		is_country_type = fallen_empire
		is_country_type = awakened_fallen_empire
		is_country_type = ascended_empire
		is_country_type = lost_empire
		AND = {
			has_global_flag = sofe_activated
			is_progenitor_empires = yes
		}
		is_country_type = sofe_light_seeker
		is_country_type = eternal_empire
	}
}

# this = system
# root = country
system_blocks_sensors = {
	root = {
		NOR = {
			has_modifier = z_lctr_mod_cntr_sensor
		}
	}
	OR = {
		is_inside_nebula = yes
		has_modifier = space_storm
		has_star_flag = lcluster
		has_star_flag = sealed_system
		has_star_flag = wg_sealed_system
		has_star_flag = wg_psionic_systems
		has_star_flag = fallen_sol_system
		root = { is_country_type = teif_primitive }
		has_star_flag = ag_no_sensor_system
		has_star_flag = bok_globules
		has_star_flag = star_flag_GAPS_sealed_system
		AND = {
			has_global_flag = has_wild_space_mod
			has_natural_wormhole = yes
			ROOT = { NOT = { has_technology = tech_WS_sensors_wormhole } }
		}
		AND = {
			has_global_flag = has_wild_space_mod
			OR = {
				is_inside_nebula = yes 
				is_ws_system = yes
				is_nebula_star = yes
				has_modifier = space_storm
			}
			ROOT = { NOT = { has_technology = tech_WS_sensors_nebula_1 } } 
		}
		AND = {
			exists = owner
			owner = {
				has_relic = r_invisibility_rune
			}
			NOT = {
				root = {
					is_same_empire = prev.owner
				}
			}
		}
	}
}

# Root = country attempting to target system for movement
# This = system being targeted
can_enter_system_by_jump = {
	custom_tooltip = {
		success_text = "debug: can jump"
		fail_text = cannot_jump_to_system
		OR = {
			NOT = { root = { is_country_type = teif_primitive } }
			root = { has_country_flag = z_fw_r_celestial_orrey_activited }
			root = { has_country_flag = z_fw_r_cheat_quantum_beacon_activited }
			# Sealed systems
			OR = {
				NOR = {
					has_star_flag = sealed_system
					has_star_flag = fallen_sol_system
				}
				AND = {
					root = { has_country_flag = entered_fallen_sol_system }
					has_star_flag = fallen_sol_system
				}
				AND = {
					root = { has_country_flag = entered_sealed_system }
					has_star_flag = sealed_system
				}
			}
			#_Clusters
			NOR = {
				has_star_flag = lcluster
				has_star_flag = wg_sealed_system
				has_star_flag = ag_no_jump_in_system
				has_star_flag = Kuat_system
				has_star_flag = Kuat_system_1
				has_star_flag = Kuat_system_2
				has_star_flag = Kuat_system_3
				has_star_flag = outercluster
				has_star_flag = ehof_compound_system
				has_star_flag = giga_core_03
				has_star_flag = katzen_jump_blocked_system
				has_star_flag = nep_Krahen_cluster
				has_star_flag = nep_Scrus_cluster
				AND = {
					has_global_flag = gigastructures_enabled
					OR = {
						cohesive_system = yes
						urmazin_system = yes
						everchanging_system = yes
						katzen_jump_blocked_system = yes
					}
				}
				AND = {
					has_global_flag = nep_not_pass_Aemethms 
					OR = {
						has_star_flag = nep_dragon_system
						has_star_flag = nep_heptagram_cluster
					}
				}
			}
		}
	}
}

# This = pop
can_resettle_pop = {
	IF = {
		limit = {
			is_shackled_robot = yes
			NOT = { has_global_flag = m_jihad_enabled }
		}
	is_shackled_robot = yes
	NOT = { has_global_flag = m_jihad_enabled }
	#	always = yes
	}
	ELSE_IF = {
		limit = {
			has_global_flag = m_jihad_enabled
			is_shackled_robot = yes
			NOT = { owner = { mt_is_jihadist = yes } }
		}
		has_global_flag = m_jihad_enabled
		is_shackled_robot = yes
		NOT = { owner = { has_valid_civic = civic_butlerian_jihadists } }
	}
	ELSE_IF = {
		limit = { has_modifier = m_temp_resettle }
		has_modifier = m_temp_resettle
	}
	ELSE_IF = {
		limit = { has_modifier = m_broken_shackles }
		has_modifier = m_broken_shackles
	}	
	ELSE_IF = {
		limit = {
			owner = { is_gestalt = yes }
			has_global_flag = m_jihad_enabled
		}
		has_global_flag = m_jihad_enabled
		owner = { is_gestalt = yes }
	}
	ELSE_IF = {
		limit = {
			owner = { mt_is_jihadist = yes }			
			has_global_flag = m_jihad_enabled
		}
		has_global_flag = m_jihad_enabled
		owner = { has_policy_flag = resettlement_allowed }
		NOR = {
			has_trait = trait_machine_unit
			has_trait = trait_mechanical
		}
	}
	ELSE_IF = {
		limit = { 
			NAND = {
				has_global_flag = m_jihad_enabled
				owner = { mt_is_jihadist = yes }
			}
			owner = { has_policy_flag = resettlement_allowed }
		}
		NOT = { has_global_flag = m_jihad_enabled }
		owner = { has_policy_flag = resettlement_allowed }
	}
	ELSE_IF = {
		limit = {
			planet = {
				OR = {
					has_modifier = deteriorating_ecosystem
					has_modifier = catastrophe_approach
					has_modifier = apocalypse
					has_modifier = ravenous_locusts
					has_modifier = doomsday_1
					has_modifier = doomsday_2
					has_modifier = doomsday_3
					has_modifier = doomsday_4
					has_modifier = doomsday_5
				}
			}
		}
		always = yes
	}
	ELSE_IF = {
		limit = {
			is_shackled_robot = yes
			or = {
				owner = { is_ai = no }
				and = {
					owner = { is_ai = yes }
					planet = {
						not = { num_pops < 6 }
						not = { num_pops = 10 }
						not = { num_pops = 15 }
						not = { num_pops = 20 }
						not = { num_pops = 25 }
						not = { num_pops = 30 }
						not = { num_pops = 35 }
						not = { num_pops = 40 }
						not = { num_pops = 45 }
						not = { num_pops = 50 }
						not = { num_pops = 55 }
						not = { num_pops = 60 }
						not = { num_pops = 65 }
						not = { num_pops = 70 }
						not = { num_pops = 75 }
						not = { num_pops = 80 }
						not = { num_pops = 85 }				
					}
				}
			}
		}
		is_shackled_robot = yes
		owner = {
			or = {
				is_ai = no
				and = {
					has_monthly_income = { resource = energy value > 25 }
					resource_stockpile_compare = { resource = energy value > 2500 }
				}
			}
		}
	}
	ELSE_IF = {
		limit = {
			planet = {
				has_modifier = planet_culture_shock
			}
		}
		OR = {
			is_same_species = planet.owner
			planet = {
				NOT = { has_modifier = planet_culture_shock }
			}
		}
	}
	ELSE_IF = {
		limit = { is_enslaved = yes }
		is_enslaved = yes
	}
	ELSE = {
		OR = {
			owner = {
				OR = {
					has_policy_flag = resettlement_allowed
					is_gestalt = yes
				}
			}
			AND = {
				#owner = { has_technology = tech_automaton_brain }
				has_trait = trait_machine_unit
			}
			AND = {
				#owner = { has_technology = tech_create_hive_mind }
				has_trait = trait_hive_mind
			}
			has_citizenship_type = { country = root type = citizenship_slavery }
			has_citizenship_type = { country = root type = citizenship_robot_servitude }
		}
	}
	ELSE_IF = {
		or = {
			owner = { is_ai = no }
			and = {
				owner = { is_ai = yes }
				planet = {
					not = { num_pops < 6 }
					not = { num_pops = 10 }
					not = { num_pops = 15 }
					not = { num_pops = 20 }
					not = { num_pops = 25 }
					not = { num_pops = 30 }
					not = { num_pops = 35 }
					not = { num_pops = 40 }
					not = { num_pops = 45 }
					not = { num_pops = 50 }
					not = { num_pops = 55 }
					not = { num_pops = 60 }
					not = { num_pops = 65 }
					not = { num_pops = 70 }
					not = { num_pops = 75 }
					not = { num_pops = 80 }
					not = { num_pops = 85 }				
				}
			}
		}
		owner = {
			or = {
				is_ai = no
				and = {
					has_monthly_income = { resource = energy value > 25 }
					resource_stockpile_compare = { resource = energy value > 2500 }
				}
			}
			OR = {
				has_policy_flag = resettlement_allowed
				is_gestalt = yes
			}
		}
	}
	ELSE = {
		owner = {
			OR = {
				has_policy_flag = resettlement_allowed
				is_gestalt = yes
			}
		}
	}
}

# This = Planet
can_resettle_planet = {
	is_controlled_by = owner
	has_ground_combat = no
	has_orbital_bombardment = no
	owner = {
		OR = {
			has_policy_flag = resettlement_allowed
			is_gestalt = yes
			any_owned_pop = {
				OR = {
					AND = {
						NOT = { has_global_flag = m_jihad_enabled }
						is_shackled_robot = yes
					}
					OR = {
						AND = {
							has_global_flag = m_jihad_enabled
							is_shackled_robot = yes
							NOT = { owner = { mt_is_jihadist = yes } }
						}
						has_modifier = m_temp_resettle
					}
					is_enslaved = yes
					has_trait = trait_mechanical
					has_trait = trait_machine_unit
					has_trait = trait_hive_mind
				}
			}
			any_owned_planet = {
				OR = {
					has_modifier = deteriorating_ecosystem
					has_modifier = catastrophe_approach
					has_modifier = apocalypse
					has_modifier = ravenous_locusts
					has_modifier = doomsday_1
					has_modifier = doomsday_2
					has_modifier = doomsday_3
					has_modifier = doomsday_4
					has_modifier = doomsday_5
				}
			}
		}
	}
	custom_tooltip = {
		text = "RESETTLE_PLANET_UNDER_COLONIZATION"
		exists = this
		is_under_colonization = no
	}
}

# should_spawn_deposits - unaltered
# is_new_colony - unaltered

# This = pop
pop_generates_crime = {
	OR = {
		AND = {
			is_sapient = yes
			is_non_sapient_robot = no
			is_being_assimilated = no
			NOR = {
				has_trait = wsg_trait_warshipgirls
				has_trait = wsg_trait_warshipgirls1
				has_trait = wsg_trait_warshipgirls2
				has_trait = sh_trait_shenhai
				has_trait = sh_trait_shenhai1
				has_trait = sh_trait_shenhai2
				has_trait = sh_trait_shenhai3
				has_trait = sh_trait_silent
				has_trait = trait_intelligent_galo
				has_trait = swg_trait_starshipgirls
				has_trait = adf_trait_dolls
				has_trait = kancolle_trait_kanmusu
				has_trait = kancolle_trait_kanmusu1
				has_trait = kancolle_trait_kanmusu2
			}
		}
		AND = {
			exists = owner
			has_trait = trait_machine_unit
			owner = {
				NOR = {
					has_country_flag = machine_computer_repressed_completed
					has_country_flag = machine_computer_release_completed
				}
			}
		}
		AND = {
			exists = owner
			has_trait = trait_hive_mind
			owner = {
				NOR = {
					has_country_flag = hive_mind_repressed_completed
					has_country_flag = hive_mind_release_completed
				}
			}
		}
	}
	NOT = { has_trait = trait_plentiful_traditions_cocoon }
}

# can_pops_grow_on_planet - unaltered
# can_pops_assemble_on_planet - unaltered
# can_pops_decline_on_planet - unaltered
# can_force_grow_on_planet - unaltered

# This = planet
# Root = country
can_force_decline_on_planet = {
	OR = {
		owner = { NOT = { has_policy_flag = population_controls_not_allowed } }
		owner = { has_country_flag = synthetic_empire }
		any_owned_pop = {
			OR = {has_citizenship_type = { country = root type = citizenship_robot_servitude }
				is_enslaved = yes
				has_trait = trait_mechanical
				has_trait = trait_machine_unit
				has_trait = trait_hive_mind
			}
		}
	}
	custom_tooltip = {
		fail_text = FORCED_DECLINE_ALREADY_PURGING
		NOT = {
			any_owned_pop = {
				has_citizenship_type = { type = citizenship_purge }
				NOT = { has_purge_type = { country = from type = purge_neutering } }
			}
		}
	}
}

# can_force_decline_species - unaltered

# This = country
can_build_branch_offices = {
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_MEGACORP
		OR = {
			has_authority = auth_corporate
			has_authority = auth_cooperative
			has_authority = auth_warshipgirls
			has_authority = auth_azur_lane_0
			has_authority = auth_azur_lane_1
			has_authority = auth_azur_lane_2
			has_civic = civic_gk
			has_valid_civic = civic_mutualistic_behavior
			AND = {
				has_global_flag = gf_alphamod_activated
				OR = {
					has_valid_civic = civic_criminal_heritage
					is_overlord = yes
					has_federation = yes
				}
			}
			AND = {
				has_global_flag = gf_am_foreignaffairs_activated
				is_subject = yes
			}
		}
	}
}

# This = country
can_support_branch_offices = {
	OR = {
		is_country_type = default
		is_country_type = ascended_empire
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_FALLEN_EMPIRES
		OR = {
			AND = {
				NOT = { has_global_flag = gf_am_foreignaffairs_activated }
				NOR = {
					is_country_type = fallen_empire
					is_country_type = awakened_fallen_empire
				}
			}
			AND = {
				has_global_flag = gf_am_foreignaffairs_activated
				is_country_type = default
			}
		}
	}
	is_regular_empire = yes
	OR = {
		AND = {
			NOT = { has_global_flag = gf_alphamod_activated }
				NOR = {
					has_authority = auth_corporate
					has_authority = auth_cooperative
					has_authority = auth_warshipgirls
					has_civic = civic_gk
					has_valid_civic = civic_sofe_inner_strength
					has_authority = auth_azur_lane_1
				}
			}
		AND = {
			has_global_flag = gf_alphamod_activated
			NOT = { has_global_flag = gf_am_foreignaffairs_activated }
			OR = {
				is_regular_empire = yes
				has_federation = yes
			}
			NOR = {
				has_authority = auth_warshipgirls
				has_civic = civic_gk
				has_valid_civic = civic_sofe_inner_strength
				has_authority = auth_azur_lane_1
			}
		}
		AND = {
			has_global_flag = gf_alphamod_activated
			has_global_flag = gf_am_foreignaffairs_activated
			is_country_type = default
		}
	}
}

# This = planet
# Root = country
can_build_branch_office_on_planet = {
	custom_tooltip = {
		fail_text = requires_owner_not_root
		exists = owner
		not = { owner = { is_same_value = root }}
	}
	custom_tooltip = {
		fail_text = requires_recipient_not_warshipgirls
		exists = owner
		owner = {
			NOT = { has_authority = auth_warshipgirls }
		}
	}	
	custom_tooltip = {
		fail_text = requires_recipient_not_fanatic_purifiers
		exists = owner
		owner = {
			OR = {
				is_same_species = root
				NOT = { has_civic = civic_fanatic_purifiers }
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_OVERLORD_EXCLUSIVE
		exists = owner
		OR = {
			and = {
				has_global_flag = gf_am_foreignaffairs_activated
				owner = { is_subject = yes }
				exists = owner.overlord
				owner.overlord = { is_same_value = root }
			}			
			owner = { is_subject = no }
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_COMMERCIAL_PACT
		exists = owner
		OR = {
			root = { is_criminal_syndicate = yes }
			root = { has_valid_civic = civic_shell_corporations }
			root = { has_valid_civic = civic_criminal_heritage }
			root = { has_authority = auth_azur_lane_1 }
			owner = { has_commercial_pact = root }
			owner = { is_in_federation_with = root }
			root = { has_valid_civic = civic_mutualistic_behavior }
			AND = {
				has_global_flag = gf_am_foreignaffairs_activated
				OR = {
					root = {
						is_overlord_to = owner
					}
					owner = {
						is_overlord_to = root
					}
				}
			}
			and = {
				root = {
					has_authority = auth_corporate
					has_diplo_migration_treaty = owner
				}
				owner = {
					has_authority = auth_corporate
					has_diplo_migration_treaty = root
				}
			}
			# allow branch offices in subsidiaries and vice versa
			AND = {
				NOT = { has_global_flag = gf_am_foreignaffairs_activated }
				OR = {
					root = {
						is_subject = yes
						is_subject_type = subsidiary
						overlord = { is_same_value = owner }
					}
					owner = {
						is_subject = yes
						OR = {
							is_subject_type = subsidiary
							overlord = { has_authority = auth_warshipgirls }
						}
						overlord = { is_same_value = root }
					}
				}
			}
			owner = {
				AND = {
					OR = {
						has_authority = auth_azur_lane_2
						has_authority = auth_azur_lane_0
					}
					is_same_value = root
				}
			}
			AND = {
				owner = { OR = { is_country_type = default is_country_type = ascended_empire is_country_type = lost_empire } }
				root = { has_ascension_perk = ap_megacorp }
			}
			AND = { owner = { has_ethic = ethic_gestalt_consciousness } root = { has_ascension_perk = ap_megacorp } }
			AND = {
				has_global_flag = hfe_installed
				root = { overlord = { is_country = prevprev.owner } }
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_CRIMINAL_HERITAGE_HAS_TRUCE
		exists = owner
		OR = {
			root = { is_criminal_syndicate = no }
			root = { 
				NOT = {
					has_authority = auth_azur_lane_1
				}
			}
			owner = {
				NOR = {
					has_truce = root
					is_at_war_with = root
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_CRIMINAL_COOLDOWN
		exists = owner
		OR = {
			root = { is_criminal_syndicate = no }
			root = { not = { has_valid_civic = civic_criminal_heritage }}
			AND = {
				OR = {
				root = { is_criminal_syndicate = yes }
				root = { has_valid_civic = civic_criminal_heritage }
				}
				NOT = { has_planet_flag = criminal_branch_closed_cooldown_planet@root }
			}
			root = { 
				NOT = {
					has_authority = auth_azur_lane_1
				}
			}
		}
	}
	# principled rogues won't build branch offices in countries they like
	hidden_trigger = {
		OR = {
			NOT = {
				root = {
					has_ai_personality = principled_rogues
					is_ai = yes
				}
			}	
			owner = {
				their_opinion = { who = root value < 0 }
			}
			owner = {
				their_opinion = { who = root value < 20 }
				NOT = {
					has_opinion_modifier = { who = root modifier = opinion_new_contact is_reverse = yes }
				}
			}
		}
	}
}

# This = country
# Checked by is_criminal_syndicate trigger
is_criminal_syndicate_rule = {
	AND = {
		OR = {
			has_valid_civic = civic_criminal_heritage
			has_valid_civic = civic_ev_criminal_ship
		}
		OR = {
			AND = {
				NOT = { has_global_flag = gf_alphamod_activated }
				OR = {
					AND = {
						has_global_flag = expanded_pops_active
						is_megacorp = yes
					}
					has_authority = auth_corporate
					has_authority = auth_cooperative
				}
			}
			has_global_flag = gf_alphamod_activated
		}
	}
}

# This = planet
can_crossbreed_species_on_planet = {
	exists = owner
	NAND = {
		owner = { is_ai = yes }
		has_global_flag = z_pf2_no_ai_hybird
	}
	any_owned_species = {
		OR = {
			has_trait = wsg_trait_warshipgirls
			has_trait = wsg_trait_warshipgirls1
			has_trait = wsg_trait_warshipgirls2
			has_trait = sh_trait_shenhai
			has_trait = sh_trait_shenhai1
			has_trait = sh_trait_shenhai2
			has_trait = sh_trait_shenhai3
		}
	}
	OR = {
		AND = {
			owner = { has_ascension_perk = ap_xeno_compatibility }
			count_species = {
				limit = { is_crossbreeding_possible = yes }
				count >= 2
			}
		}
		AND = {
			owner = { has_ascension_perk = ap_life_masters }	
			count_species = {
				limit = { has_trait = trait_hive_mind }
				count >= 2
			}
		}
	}
}

# can_crossbreed_species - unaltered
# can_win_timed_victory - unaltered

# This = country
can_use_galactic_market = {
	or = {
		and = {
			is_ai = no
			and = {
				OR = {
					is_country_type = default
					AND = {
						is_country_type = default_ev
						NOT = { has_policy_flag = ev_no_use_galactic_market }
					}
					is_country_type = ascended_empire
					is_country_type = lost_empire
					is_country_type = original_empire_active
				}
				NOR = {
					has_civic = civic_fanatic_purifiers
					has_civic = civic_hive_devouring_swarm
					has_civic = civic_machine_terminator
					has_country_flag = dark_side
				}	
			}
		}
		and = {
			is_ai = yes
			and = {
				OR = {
					is_country_type = default
					AND = {
						is_country_type = default_ev
						NOT = { has_policy_flag = ev_no_use_galactic_market }
					}
					is_country_type = ascended_empire
					is_country_type = lost_empire
					is_country_type = original_empire_active
				}
				NOR = {
					has_civic = civic_fanatic_purifiers
					has_civic = civic_hive_devouring_swarm
					has_civic = civic_machine_terminator
					has_country_flag = dark_side
				}	
			}
			or = {
				and = {
					resource_stockpile_compare = { resource = energy value > 5000 }
					or = {
						resource_stockpile_compare = { resource = minerals value < 500 }
						resource_stockpile_compare = { resource = alloys value < 250 }
						and = {
							country_uses_food = yes
							resource_stockpile_compare = { resource = food value < 10 }
						}
						and = {
							country_uses_consumer_goods = yes
							resource_stockpile_compare = { resource = consumer_goods value < 10 }
						}
					}
				}
				and = {
					resource_stockpile_compare = { resource = energy value < 500 }
					or = {
						resource_stockpile_compare = { resource = sr_wealth value > 5000 }
						resource_stockpile_compare = { resource = minerals value > 5000 }
						resource_stockpile_compare = { resource = alloys value > 2000 }
						resource_stockpile_compare = { resource = food value > 10000 }
						resource_stockpile_compare = { resource = consumer_goods value > 2500 }
					}
				}
			}
		}
	}
}

# ROOT = country
# THIS = pop
can_be_sold_on_slave_market = {
	OR = {
		and = {
			ROOT = { is_ai = no }
			or = {
				is_enslaved = yes
				is_non_sapient_robot = yes
				is_shackled_robot = yes
				is_being_purged = yes
				AND = {
					has_global_flag = organic_slave_trade_banned_flag
					is_organic_species = no
				}
				AND = {
					has_global_flag = sentient_slave_trade_banned_flag
					is_sapient = no
				}
			}
			NOT = { has_trait = trait_plentiful_traditions_cocoon }
		}
		ROOT = {
			NOR = { 
				has_authority = auth_warshipgirls
				has_authority = auth_shenhai
			}
		}
		NOR = {
			has_trait = wsg_trait_warshipgirls
			has_trait = wsg_trait_warshipgirls1
			has_trait = wsg_trait_warshipgirls2
			has_trait = sh_trait_shenhai
			has_trait = sh_trait_shenhai1
			has_trait = sh_trait_shenhai2
			has_trait = sh_trait_shenhai3
		}
		and = {
			ROOT = { 
				is_ai = yes 
				resource_stockpile_compare = { resource = energy value < 500 }
			}
			planet = {
				not = { num_pops < 6 }
				not = { num_pops = 10 }
				not = { num_pops = 15 }
				not = { num_pops = 20 }
				not = { num_pops = 25 }
				not = { num_pops = 30 }
				not = { num_pops = 35 }
				not = { num_pops = 40 }
				not = { num_pops = 45 }
				not = { num_pops = 50 }
				not = { num_pops = 55 }
				not = { num_pops = 60 }
				not = { num_pops = 65 }
				not = { num_pops = 70 }
				not = { num_pops = 75 }
				not = { num_pops = 80 }
				not = { num_pops = 85 }
				num_pops > 70
			}
			or = {
				is_enslaved = yes
				is_non_sapient_robot = yes
				is_shackled_robot = yes
				is_being_purged = yes
				AND = {
					has_global_flag = organic_slave_trade_banned_flag
					is_organic_species = no
				}
				AND = {
					has_global_flag = sentient_slave_trade_banned_flag
					is_sapient = no
				}
			}
			NOT = { has_trait = trait_plentiful_traditions_cocoon }
		}
	}
}

# This = country
can_be_part_of_galactic_community = {
	OR = {
		is_country_type = default
		is_country_type = default_ev
		is_country_type = ascended_empire
        is_country_type = original_empire_active
	}
	NOR = {
		has_civic = civic_fanatic_purifiers
		has_civic = civic_hive_devouring_swarm
		has_civic = civic_machine_terminator
		has_country_flag = dark_side
	}
}

# This = country
can_see_galactic_community = {
	NOT = { is_country_type = teif_primitive }
	OR = {
		has_country_flag = galcom_form_aye
		has_country_flag = galcom_form_nay
		is_galactic_community_member = yes
		is_country_type = lost_empire
        is_country_type = original_empire_active
		has_country_flag = dark_side
	}
}

# This = country
can_be_part_of_galactic_council = {
	OR = {
		is_country_type = default
		is_country_type = default_ev
		is_country_type = ascended_empire
        is_country_type = original_empire_active
	}
	NOR = {
		has_civic = civic_fanatic_purifiers
		has_civic = civic_hive_devouring_swarm
		has_civic = civic_machine_terminator
		has_country_flag = dark_side
	}
}

# must_be_advanced_empire - unaltered
# is_allowed_to_be_advanced_empire - unaltered
